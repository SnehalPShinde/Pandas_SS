# -*- coding: utf-8 -*-
"""Pandas project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g7A27reJK31AdpaNvX_K0YPRWcn7eXe5
"""

import pandas as pd
import numpy as np
    
dict1={'Name':['Alam','Rohit','Bimla','Rahul','Chaman','Vivek'],
       'Age':[29,23,35,25,35,38],
       'City':['Indore','New Delhi','Rohtak','Kolkata','Chennai','Gurugram'],
       'DOB	':['20-11-1991','19-09-1997','09-01-1985	','19-09-1995','12-03-1988','22-06-1982	'],
       'Gender':['Male','Male','Female','Male','Male','Male'],
       'Salary':[50000,85000,20000,40000,65000,35000]}

info=pd.DataFrame(dict1)

info

info.head()

info.tail()

info.describe()

info.info()

# 1.How to set index in dataframe using columns? 
# Ans: Using set index function we can set columns as an index in dataframe.

info.set_index('Name')

info.set_index('Age')

#
info = pd.DataFrame(dict1, index = ["day1", "day2", "day3","day4","day5","day6"])

info

# 2.how to reset index in dataframe?

# Ans: Reset index will reset the index by default by 0,1,2,......
# Reset_index will keep the "old" idexes in a column named "index".
# syntax=dataframe.reset_index()

info.reset_index()

# How to remove added column as "index" in dataframe?
# How do i use "drop" parameter in dataframe?

# Ans: using drop parameter we can remove the added column as index in the dataframe.

info.reset_index(drop=True)

# Uses of reset_index
# reset_index convert the series in dataframe.

info['Name'].value_counts().reset_index()

info['Name'].reset_index()

# 3. How to find the datatype of the columns in dataframe?
#Ans: Using dtype we can find the dataframe of the columns.

info.dtypes

# 4. How to change the dtype of columns in the dataframe?
#Ans: Astype is a function which will convert dtype of dataframe.
#syntax:DataFrame.astype({'columns':'category'}).dtypes

info.astype({'Age':'int32'}).dtypes

info.astype({'Name':'string'}).dtypes

# 5. How to find missing value in the dataframe?
#Ans: isna function takes a scalar or array-like object and indicates whether values are missing (NaN in numeric arrays, None or NaN in object arrays, NaT in datetimelike).

dict1={'Name':['Alam','Rohit','Bimla','Rahul','Chaman','Vivek'],
       'Age':[29,23,35,25,35,38],
       'City':['Indore','New Delhi','Rohtak',None,'Chennai','Gurugram'],
       'DOB	':['20-11-1991','19-09-1997','09-01-1985	','19-09-1995','12-03-1988','22-06-1982	'],
       'Gender':['Male','Male','Female',None,'Male','Male'],
       'Salary':[50000,85000,20000,40000,65000,35000]}

info1=pd.DataFrame(dict1)

info1

# output is in boolian value
# true=missing value
# false= has value
info1.isna()

#How to find the count of missing value in dataframe?
#Ans: isna().any().value_counts will give the number of missing value present in the dataframe.

info1.isna().any().value_counts()

#The isna() method returns a DataFrame object where all the values are replaced with a Boolean value True for NA (not-a -number) values, and otherwise False.
info1.isna().any()

# 6. How to use factorize method in dataframe?
#Ans: factorize: Encode the object as an enumerated type or categorical variable.

labels,uniques=pd.factorize(['b','b','c','a','d'])

#labels: it contain numerical value.
labels

#uniques: it contain unique variable.
uniques

#Sort=True,the unique value will be sorted, and label will be shuffled so that the relationship is maintained.

labels,uniques=pd.factorize(['b','b','c','a','d'],sort=True)

labels

uniques

#7.Write uses of lreshape in dataframe?
#Ans:lreshape: Reshape wide-format data to long.
#Syntax: pd.lreshape(datafarme, groups, dropna=True)[source]

data = pd.DataFrame({'hr1': [514, 573], 'hr2': [545, 526],
                     'team': ['Red Sox', 'Yankees'],
                     'year1': [2007, 2007], 'year2': [2008, 2008]})

data

pd.lreshape(data, {'year': ['year1', 'year2'], 'hr': ['hr1', 'hr2']})

#8.how wide_to_long function works on dataframe?
#Ans:
df = pd.DataFrame({
    'famid': [1, 1, 1, 2, 2, 2, 3, 3, 3],
    'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],
    'ht1': [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],
    'ht2': [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]
})
df

l = pd.wide_to_long(df, stubnames='ht', i=['famid', 'birth'], j='age')
l

#8.how wide_to_long function works on dataframe?
#Ans:
df = pd.DataFrame({"A1970" : {0 : "a", 1 : "b", 2 : "c"},
                   "A1980" : {0 : "d", 1 : "e", 2 : "f"},
                   "B1970" : {0 : 2.5, 1 : 1.2, 2 : .7},
                   "B1980" : {0 : 3.2, 1 : 1.3, 2 : .1},
                   "X"     : dict(zip(range(3), np.random.randn(3)))
                  })
df["id"] = df.index
df

pd.wide_to_long(df, ["A", "B"], i="id", j="year")

pd.wide_to_long(df, ["A", "B"], i="X", j="year")

#9.How to detect non-missing value in dataframe?
#notna(): Detect non-missing values for an array-like object.

pd.notna(info1)

#10.Write a function which will convert the dataframe in numeric type?
#Ans: to_numeric will convert argument to a numeric type

dict1={'Name':['Alam','Rohit','Bimla','Rahul','Chaman','Vivek'],
       'Age':['29','23','35','25','35','38'],
       'City':['Indore','New Delhi','Rohtak','Kolkata','Chennai','Gurugram'],
       'DOB	':['20-11-1991','19-09-1997','09-01-1985	','19-09-1995','12-03-1988','22-06-1982	'],
       'Gender':['Male','Male','Female','Male','Male','Male'],
       'Salary':[50000,85000,20000,40000,65000,35000]}

info2=pd.DataFrame(dict1)

info2

type(info2.Age[1])

info2['Age'] = pd.to_numeric(info2.Age)

info2

type(info2.Age[1])

info.flags.allows_duplicate_labels

#11. how to access single value for a rows/columns?
#Ans: iat function access a single value for a row/column pair by integer position..

info.iat[1, 2]

info.iat[4, 3]

#12.how to access single value for a rows/columns pair by label and get the value?
#Ans:at function access a single value for a row/column pair by label.

info.at[4, "Salary"]

#How to set the value at specific row/column pair?

info.at[4, "Salary"]=60000

info

#13. How to find memory consumed by an element in dataframe?
#Ans: The memory usage of each column in bytes.
info.memory_usage()

# If index=True, the memory usage of the index is the first item in the output.
info.memory_usage(index=False)

#deep: default False
#If True, introspect the data deeply by interrogating object dtypes for system-level memory consumption, and include it in the returned values.
info.memory_usage(deep=True)

#14.how do I access itertuple function in dataframe?
#Ans:An object to iterate over namedtuples for each row in the DataFrame with the first field possibly being the index and following fields being the column values.

dict1={'Name':['Alam','Rohit','Bimla','Rahul','Chaman','Vivek'],
       'Age':[29,23,35,25,35,38],
       'City':['Indore','New Delhi','Rohtak','Kolkata','Chennai','Gurugram'],
       'DOB	':['20-11-1991','19-09-1997','09-01-1985	','19-09-1995','12-03-1988','22-06-1982	'],
       'Gender':['Male','Male','Female','Male','Male','Male'],
       'Salary':[50000,85000,20000,40000,65000,35000]}

info=pd.DataFrame(dict1)

for i in info.itertuples():
    print(i)

#setting the index parameter to False we can remove the index as the first element of the tuple.
for i in info.itertuples(index=False):
    print(i)

#15.how to perform operation in the dataframe?
#Ans: Dataframe.add()
info[['Salary']].add(10000)

info[['Salary']]+10000

info[['Salary', 'Age']].add({'Salary': 10000, 'Age': 5})

info[['Salary', 'Age']] + {'Salary': 10000, 'Age': 5}

info[['Salary']].sub(10000)

info[['Salary']]-(10000)

info[['Salary']].mul(10)

info[['Salary']]*(10)

info[['Salary']].div(10)

info[['Salary']]/(10)

#16.Write a function which perform column wise combination with another DataFrame?
#Write a function which will combine dataframe's by using column ?
#Ans: 
df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})
df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})
df1

df2

take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2
df1.combine(df2, take_smaller)

df2.combine(df1, take_smaller)

#17.write a function which round a DataFrame to a variable number of decimal places.
df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],
                  columns=['dogs', 'cats'])
df

df.round(1)

df.round({'dogs': 1, 'cats': 0})

#18. how pivot_table works in dataframe?
df = pd.DataFrame({"A": ["apple", "apple", "apple", "apple", "apple",
                         "andriod", "andriod", "andriod", "andriod"],
                   "B": ["one", "one", "one", "two", "two",
                         "one", "one", "two", "two"],
                   "C": ["small", "large", "large", "small",
                         "small", "large", "small", "small",
                         "large"],
                   "D": [1, 2, 2, 3, 3, 4, 5, 6, 7],
                   "E": [2, 4, 5, 5, 6, 6, 8, 9, 9]})

df

table = pd.pivot_table(df, values='D', index=['A', 'B'],
                       columns=['C'], aggfunc=np.sum)

table

table = pd.pivot_table(df, values='D', index=['A', 'B'],
                       columns=['C'], aggfunc=np.sum, fill_value=0)

table

#19.Write a function which interchange the rows and columns in the dataframe?
#Ans: Transpose will interchange the rows and columns in the dataframe.
info.T

#20.Write a function to fill the missing value in the dataframe
dict1={'Name':['Alam','Rohit','Bimla','Rahul','Chaman','Vivek'],
       'Age':[29,23,None,25,35,None],
       'City':['Indore','New Delhi','Rohtak','Kolkata','Chennai','Gurugram'],
       'DOB	':['20-11-1991','19-09-1997','09-01-1985	','19-09-1995','12-03-1988','22-06-1982	'],
       'Gender':['Male','Male','Female','Male','Male','Male'],
       'Salary':[50000,85000,None,None,65000,35000]}

info3=pd.DataFrame(dict1)

info3

info3.fillna(method='ffill')

info3.fillna(method='bfill')

"""# Visualization

"""

import matplotlib as plot
import pandas as pd
import numpy as np
import seaborn as sns 
import warnings
warnings.filterwarnings('ignore')

df = pd.DataFrame({
    'sales': [3, 2, 3, 9, 10, 6],
    'signups': [5, 5, 6, 12, 14, 13],
    'visits': [20, 42, 28, 62, 81, 50],
}, index=pd.date_range(start='2018/01/01', end='2018/07/01',
                       freq='M'))

df

#1.DataFrame.plot.area(x=None, y=None, stacked=True, **kwargs)
df.plot.area()

df.plot.area(stacked=False)

df.plot.area(y='sales')

df.plot.area(x='sales',y='visits')

#2.DataFrame.plot.bar(x=None, y=None, **kwargs)
df.plot.bar()

df.plot.bar(stacked=True)

df.plot.bar(rot=0, subplots=True)

df.plot.bar(
    rot=0, subplots=True, color={"sales": "red", "signups": "green","visits":"violet"}
)

df.plot.bar(y='sales', rot=0)

df.plot.bar(x='sales', rot=0)

#3.DataFrame.plot.barh(x=None, y=None, **kwargs)
df.plot.barh()

df.plot.barh(x='sales', y='visits')

#
df.plot.barh(stacked=True)

df.plot.barh(color={"sales": "violet", "visits": "red","signups":"orange"})

#4.DataFrame.plot.box(by=None, **kwargs)[source]
df.plot.box()

df.plot.box(column="sales", by="signups", figsize=(5, 3))

df.plot.box(column="signups", by="visits", figsize=(5, 3))

df.plot.box(column="signups", by="visits", figsize=(5, 3),color="red")

#5.DataFrame.plot.density(bw_method=None, ind=None, **kwargs)[source]
df.plot.kde()

#A scalar bandwidth can be specified. Using a small bandwidth value can lead to over-fitting, while using a large bandwidth value may result in under-fitting
df.plot.kde(bw_method=1.0)

#ind:determines the evaluation points for the plot of the estimated
df.plot.kde(ind=[1, 2, 3, 4, 5])

#6.DataFrame.plot.hexbin(x, y, C=None, reduce_C_function=None, gridsize=None, **kwargs)[source]

n = 10000
df = pd.DataFrame({'x': np.random.randn(n),
                   'y': np.random.randn(n)})

df.plot.hexbin(x='x', y='y', gridsize=10)

df.plot.hexbin(x='x',
                    y='y',
                    reduce_C_function=np.sum,
                    gridsize=25)

df.plot.hexbin(x='x',
                    y='y',
                    reduce_C_function=np.sum,
                    gridsize=25,
                    cmap="viridis")

#7.DataFrame.plot.hist(by=None, bins=10, **kwargs)[source]
df.plot.hist(bins=15, alpha=0.5)

df.plot.hist(bins=15, alpha=0.5,rwidth=0.95)

df.plot.hist(bins=15, alpha=0.5,rwidth=0.95,color=['green','blue'])

df.plot.hist(bins=15, alpha=0.5,rwidth=0.95,color=['green','blue','violet'],label=['sales','signups','visits'])

df.plot.hist(bins=15, alpha=0.5,rwidth=0.95,color=['green','blue','violet'],label=['sales','signups','visits'],orientation='horizontal')

#8.DataFrame.plot.pie(**kwargs)[source]
df.plot.pie(y='sales', figsize=(5, 5))

df.plot.pie(y='visits', figsize=(5, 5))

df.plot.pie(y='signups', figsize=(5, 5))

df.plot.pie(y='signups', figsize=(5, 5),autopct="%1.0f%%")

#
df.plot.pie(subplots=True, figsize=(20, 10))

df.plot.pie(y='signups', figsize=(5, 5),explode=[0.2,0,0,0,0,0])

df.plot.pie(y='signups', figsize=(5, 5),explode=[0.2,0.3,0,0,0,0])

df.plot.pie(y='signups', figsize=(5, 5),explode=[0.2,0.3,0.2,0.3,0.2,0.3])

df.plot.pie(y='signups', figsize=(5, 5),explode=[0.2,0.3,0.2,0.3,0.2,0.3],shadow=True)

#9.DataFrame.plot.scatter(x, y, s=None, c=None, **kwargs)

df = pd.DataFrame([[5.1, 3.5, 0], [4.9, 3.0, 0], [7.0, 3.2, 1],
                   [6.4, 3.2, 1], [5.9, 3.0, 2]],
                  columns=['length', 'width', 'species'])
df.plot.scatter(x='length',y='width',c='DarkBlue')

df.plot.scatter(x='length', y='width',colormap='viridis')

size=[20,35,40,15,10]
df.plot.scatter(x='length',y='width',c='species',colormap='viridis',s=size)

size=[20,35,40,15,10]
df.plot.scatter(x='length',y='width',c='species',colormap='viridis',s=size,alpha=1)

size=[20,35,40,15,10]
df.plot.scatter(x='length',y='width',c='species',colormap='viridis',s=size,alpha=1,label='Area')

#10.DataFrame.hist(column=None, by=None, grid=True, xlabelsize=None, xrot=None, ylabelsize=None, yrot=None, ax=None, sharex=False, sharey=False, figsize=None, layout=None, bins=10, backend=None, legend=False, **kwargs)
df.hist(bins=3)

df.hist(bins=3,grid=True)

#xlabelsize will increase or decrease the size of number present on x-axis
df.hist(bins=3,grid=True,xlabelsize=10,xrot=None)

#xrot will tilt the number on x-axis 
df.hist(bins=3,grid=True,xlabelsize=10,xrot=10)

#ylabelsize and yrot as similar as xlabelsize and xrot
df.hist(bins=3,grid=True,xlabelsize=10,xrot=10,ylabelsize=10, yrot=5)

df.hist(bins=3,grid=True,xlabelsize=10,xrot=10,ylabelsize=10, yrot=5,sharex=1,sharey=10)

#11.distplot
sns.distplot(df['sales'],color='green')

sns.distplot(df['sales'],hist=True,color='green',kde=False)

sns.distplot(df['sales'],hist=True,color='red',kde=True)

sns.distplot(df['sales'],hist=False,color='green',kde=True)

sns.distplot(df['signups'],hist=True,color='blue',kde=True)

sns.distplot(df['signups'],hist=True,color='blue',kde=False)

sns.distplot(df['visits'],hist=True,color='violet',kde=True)

sns.distplot(df['visits'],hist=True,color='violet',kde=True)

#12.Joinplot
sns.jointplot(df['visits'])

sns.jointplot(df['visits'],kind='kde')

sns.jointplot(df['visits'],kind='reg')

#13.pairplot
sns.pairplot(df)

#14.boxplot
sns.boxplot(x='sales',y='visits',data=df)

sns.boxplot(x='sales',y='signups',data=df)

sns.boxplot(x='visits',y='sales',data=df)

sns.boxplot(x='visits',y='sales',data=df)

#15.violinplot
sns.violinplot(x='sales',y='signups',data=df)

sns.violinplot(x='signups',y='sales',data=df)

sns.violinplot(x='signups',y='sales',data=df,hue='visits')

sns.violinplot(x='signups',y='sales',data=df,hue='visits',linewidth=5)

sns.violinplot(x='signups',y='sales',data=df,hue='visits',linewidth=3,palette='spring')

#16.regplot
sns.regplot(x='sales',y='signups',data=df)

sns.regplot(x='signups',y='sales',data=df)

sns.regplot(x='signups',y='sales',data=df,scatter=True)

sns.regplot(x='signups',y='sales',data=df,scatter=False)

sns.regplot(x='signups',y='sales',data=df,scatter=False,ci=None)

sns.regplot(x='signups',y='sales',data=df,scatter=True,ci=None)

sns.regplot(x='signups',y='sales',data=df,scatter=True,ci=10)

sns.regplot(x='signups',y='sales',data=df,scatter=True,ci=None,x_estimator=np.mean)

#17.heatmap
sns.heatmap(df.corr())

sns.heatmap(df.corr(),cmap='tab20')

sns.heatmap(df.corr(),cmap='tab20',annot=True)

sns.heatmap(df.corr(),cmap='tab20',annot=True,linewidth=2,linecolor='Black')

#18.relplot
sns.relplot(x='sales',y='signups',data=df)

sns.relplot(x='sales',y='signups',data=df,hue='visits')

sns.relplot(x='sales',y='visits',data=df)

sns.relplot(x='visits',y='sales',data=df)

sns.relplot(x='visits',y='signups',data=df)

sns.relplot(x='visits',y='signups',data=df)

sns.relplot(x='visits',y='signups',data=df,style='sales')

sns.relplot(x='visits',y='signups',data=df,style='sales',size='sales')

sns.relplot(x='visits',y='signups',data=df,style='sales',size='sales',kind='line')

#19.scatterplot
df = pd.DataFrame([[5.1, 3.5, 0], [4.9, 3.0, 0], [7.0, 3.2, 1],
                   [6.4, 3.2, 1], [5.9, 3.0, 2]],
                  columns=['length', 'width', 'species'])
sns.scatterplot(x='length',y='width',c='DarkBlue',data=df)

sns.scatterplot(x='width',y='length',c='red',data=df,hue='species')

sns.scatterplot(x='width',y='length',c='red',data=df,hue='species',alpha=1)

sns.scatterplot(x='length',y='width',c='red',data=df)
sns.scatterplot(x='width',y='length',c='orange',data=df)

sns.scatterplot(x='length',y='width',c='red',data=df,label='Area')
sns.scatterplot(x='width',y='length',c='orange',data=df,label='Area1')

#catplot
sns.catplot(x='length',y='width',color='DarkBlue',data=df)

sns.catplot(x='length',y='width',data=df,color='green')

sns.catplot(x='length',y='width',data=df,color='green',hue='species')

sns.catplot(x='species',y='width',data=df,color='green',hue='length')

sns.catplot(x='species',y='width',data=df,color='pink',hue='length')

sns.catplot(x='species',y='width',data=df,color='pink',hue='length',label='Area')

